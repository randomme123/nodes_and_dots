<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.11.0" xml:lang="en-US">
  <compounddef id="_ships_8cpp" kind="file" language="C++">
    <compoundname>Ships.cpp</compoundname>
    <includes refid="_ships_8hpp" local="yes">Ships.hpp</includes>
    <includes local="no">cstdlib</includes>
    <includes local="no">ctime</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">iostream</includes>
    <includes local="no">cassert</includes>
    <includes local="no">cmath</includes>
    <incdepgraph>
      <node id="6">
        <label>Graph.hpp</label>
        <link refid="_graph_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>cpp/src/objects/Ships.cpp</label>
        <link refid="_ships_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>Ships.hpp</label>
        <link refid="_ships_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>SFML/Graphics.hpp</label>
      </node>
      <node id="10">
        <label>algorithm</label>
      </node>
      <node id="7">
        <label>boost/graph/adjacency_list.hpp</label>
      </node>
      <node id="12">
        <label>cassert</label>
      </node>
      <node id="13">
        <label>cmath</label>
      </node>
      <node id="8">
        <label>cstdlib</label>
      </node>
      <node id="9">
        <label>ctime</label>
      </node>
      <node id="11">
        <label>iostream</label>
      </node>
      <node id="5">
        <label>utility</label>
      </node>
      <node id="4">
        <label>vector</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="_ships_8cpp_1a6afa51a7326b3ca9dcbe6dc7936a6cab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_ship" kindref="compound">Ship</ref> &gt;</type>
        <definition>std::vector&lt; Ship &gt; createShips</definition>
        <argsstring>(int num_ships, const std::vector&lt; std::pair&lt; float, float &gt; &gt; &amp;coords, const Graph &amp;graph, GraphManager &amp;graphManager, float speed)</argsstring>
        <name>createShips</name>
        <param>
          <type>int</type>
          <declname>num_ships</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::pair&lt; float, float &gt; &gt; &amp;</type>
          <declname>coords</declname>
        </param>
        <param>
          <type>const <ref refid="_graph_8hpp_1a4158a12566a53ab55345e02a783fe275" kindref="member">Graph</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <param>
          <type><ref refid="class_graph_manager" kindref="compound">GraphManager</ref> &amp;</type>
          <declname>graphManager</declname>
        </param>
        <param>
          <type>float</type>
          <declname>speed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cpp/src/objects/Ships.cpp" line="101" column="13" bodyfile="cpp/src/objects/Ships.cpp" bodystart="101" bodyend="114"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_ships_8hpp" kindref="compound">Ships.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdlib&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ctime&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"><ref refid="class_ship_1ac856ebacba1f23276d60610f747f4dd4" kindref="member">Ship::Ship</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;float,<sp/>float&gt;&amp;<sp/>start_position,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="_graph_8hpp_1a4158a12566a53ab55345e02a783fe275" kindref="member">Graph</ref>&amp;<sp/>graph,<sp/><ref refid="class_graph_manager" kindref="compound">GraphManager</ref>&amp;<sp/>graphManager,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>speed)</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>position(start_position),<sp/>graph(graph),<sp/>graphManager(graphManager),<sp/>path_index(0),<sp/>speed(speed),<sp/>orientation(0.0f),<sp/>selected(false)<sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>findNewDestination();</highlight></codeline>
<codeline lineno="12"><highlight class="normal">}</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_ship_1a3ee2f77fa9920030dc3ff8268b2f73a4" kindref="member">Ship::update</ref>()<sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_ship_1a6146628b2aa51985d6c705014b380226" kindref="member">path_index</ref><sp/>&lt;<sp/><ref refid="class_ship_1ae417f0fe1c677e41a819294e7f82d711" kindref="member">path</ref>.size()<sp/>-<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<ref refid="class_ship_1a6146628b2aa51985d6c705014b380226" kindref="member">path_index</ref><sp/>+<sp/>1<sp/>&lt;<sp/><ref refid="class_ship_1a588f015bd542bc3b83284b30dec870a5" kindref="member">graphManager</ref>.<ref refid="class_graph_manager_1aa7d7a22fedd54e79d4c58e4967e77777" kindref="member">get_coords</ref>().size());</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>target<sp/>=<sp/><ref refid="class_ship_1a588f015bd542bc3b83284b30dec870a5" kindref="member">graphManager</ref>.<ref refid="class_graph_manager_1aa7d7a22fedd54e79d4c58e4967e77777" kindref="member">get_coords</ref>()[<ref refid="class_ship_1ae417f0fe1c677e41a819294e7f82d711" kindref="member">path</ref>[<ref refid="class_ship_1a6146628b2aa51985d6c705014b380226" kindref="member">path_index</ref><sp/>+<sp/>1]];</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dx<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(target.first<sp/>-<sp/><ref refid="class_ship_1aeb648c7396680e0a0a15408f7eb54bce" kindref="member">position</ref>.first);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dy<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(target.second<sp/>-<sp/><ref refid="class_ship_1aeb648c7396680e0a0a15408f7eb54bce" kindref="member">position</ref>.second);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>distance<sp/>=<sp/>std::sqrt(dx<sp/>*<sp/>dx<sp/>+<sp/>dy<sp/>*<sp/>dy);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(distance<sp/>&gt;<sp/><ref refid="class_ship_1af70610e26865d07d94ee79463b00607f" kindref="member">speed</ref>)<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_ship_1aeb648c7396680e0a0a15408f7eb54bce" kindref="member">position</ref>.first<sp/>+=<sp/>dx<sp/>/<sp/>distance<sp/>*<sp/><ref refid="class_ship_1af70610e26865d07d94ee79463b00607f" kindref="member">speed</ref>;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_ship_1aeb648c7396680e0a0a15408f7eb54bce" kindref="member">position</ref>.second<sp/>+=<sp/>dy<sp/>/<sp/>distance<sp/>*<sp/><ref refid="class_ship_1af70610e26865d07d94ee79463b00607f" kindref="member">speed</ref>;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_ship_1a69f3becacfcebccbf4135ba5d817ec32" kindref="member">orientation</ref><sp/>=<sp/>std::atan2(dy,<sp/>dx)<sp/>*<sp/>180.0f<sp/>/<sp/>3.14159265f<sp/>-<sp/>30.0f;<sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>radians<sp/>to<sp/>degrees<sp/>and<sp/>adjust</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_ship_1aeb648c7396680e0a0a15408f7eb54bce" kindref="member">position</ref><sp/>=<sp/>target;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_ship_1a6146628b2aa51985d6c705014b380226" kindref="member">path_index</ref>++;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_ship_1ae63fa61fb34dc5fa8d37080dfe08fec5" kindref="member">findNewDestination</ref>();</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_ship_1ae63fa61fb34dc5fa8d37080dfe08fec5" kindref="member">Ship::findNewDestination</ref>()<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>coords<sp/>=<sp/><ref refid="class_ship_1a588f015bd542bc3b83284b30dec870a5" kindref="member">graphManager</ref>.<ref refid="class_graph_manager_1aa7d7a22fedd54e79d4c58e4967e77777" kindref="member">get_coords</ref>();</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>keep_node<sp/>=<sp/><ref refid="class_ship_1a588f015bd542bc3b83284b30dec870a5" kindref="member">graphManager</ref>.<ref refid="class_graph_manager_1a06716e32eee535a06888a5e3cabbf52b" kindref="member">get_keep_node</ref>();<sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>this<sp/>method<sp/>returns<sp/>a<sp/>const<sp/>reference<sp/>to<sp/>the<sp/>keep_node<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Filter<sp/>to<sp/>get<sp/>indices<sp/>of<sp/>valid<sp/>coordinates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;size_t&gt;<sp/>valid_indices;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>coords.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(keep_node[i])<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>valid_indices.push_back(i);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!valid_indices.empty());</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>current<sp/>position<sp/>index<sp/>among<sp/>valid<sp/>coordinates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>current_position_it<sp/>=<sp/>std::find(coords.begin(),<sp/>coords.end(),<sp/><ref refid="class_ship_1aeb648c7396680e0a0a15408f7eb54bce" kindref="member">position</ref>);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(current_position_it<sp/>!=<sp/>coords.end());<sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>current<sp/>position<sp/>is<sp/>in<sp/>the<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>current_index<sp/>=<sp/>std::distance(coords.begin(),<sp/>current_position_it);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!keep_node[current_index])<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Current<sp/>position<sp/>is<sp/>not<sp/>valid,<sp/>find<sp/>the<sp/>nearest<sp/>valid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>a<sp/>fallback,<sp/>ideally<sp/>this<sp/>situation<sp/>should<sp/>be<sp/>managed<sp/>to<sp/>not<sp/>happen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>nearest_valid<sp/>=<sp/>std::min_element(valid_indices.begin(),<sp/>valid_indices.end(),<sp/>[&amp;](</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>da<sp/>=<sp/>std::hypot(static_cast&lt;float&gt;(coords[a].first<sp/>-<sp/>position.first),<sp/>static_cast&lt;float&gt;(coords[a].second<sp/>-<sp/>position.second));</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>db<sp/>=<sp/>std::hypot(static_cast&lt;float&gt;(coords[b].first<sp/>-<sp/>position.first),<sp/>static_cast&lt;float&gt;(coords[b].second<sp/>-<sp/>position.second));</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>da<sp/>&lt;<sp/>db;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_index<sp/>=<sp/>*nearest_valid;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_ship_1aeb648c7396680e0a0a15408f7eb54bce" kindref="member">position</ref><sp/>=<sp/>coords[current_index];<sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>the<sp/>ship&apos;s<sp/>position<sp/>to<sp/>the<sp/>nearest<sp/>valid<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Randomly<sp/>choose<sp/>a<sp/>destination<sp/>from<sp/>valid<sp/>indices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>goal_index<sp/>=<sp/>valid_indices[std::rand()<sp/>%<sp/>valid_indices.size()];</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(current_index<sp/>&lt;<sp/>coords.size());</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(goal_index<sp/>&lt;<sp/>coords.size());</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>int_path<sp/>=<sp/><ref refid="class_ship_1a588f015bd542bc3b83284b30dec870a5" kindref="member">graphManager</ref>.<ref refid="class_graph_manager_1a75bfc6d8a9271dd5c54a9b97beb30f3e" kindref="member">compute_shortest_path</ref>(<ref refid="class_ship_1a31de9f6396da41ea702ddae73a2e2c80" kindref="member">graph</ref>,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(current_index),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(goal_index));</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_ship_1ae417f0fe1c677e41a819294e7f82d711" kindref="member">path</ref><sp/>=<sp/>std::vector&lt;size_t&gt;(int_path.begin(),<sp/>int_path.end());</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_ship_1a6146628b2aa51985d6c705014b380226" kindref="member">path_index</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_ship_1aa8c6981b9fc9532389cb565b15f8966f" kindref="member">Ship::setSelected</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>selected)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;selected<sp/>=<sp/><ref refid="class_ship_1ab21568085374711c2149b8da2f6cabc4" kindref="member">selected</ref>;</highlight></codeline>
<codeline lineno="79"><highlight class="normal">}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_ship_1a790f0ffc0b0515643493139ebf8ff1bc" kindref="member">Ship::isSelected</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_ship_1ab21568085374711c2149b8da2f6cabc4" kindref="member">selected</ref>;</highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal">std::pair&lt;float,<sp/>float&gt;<sp/><ref refid="class_ship_1abbce5b85c9bb3e52adb87557ded51015" kindref="member">Ship::getPosition</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_ship_1aeb648c7396680e0a0a15408f7eb54bce" kindref="member">position</ref>;</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="class_ship_1abb52aeade67da06c5d8f2aa41c97ea79" kindref="member">Ship::getOrientation</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_ship_1a69f3becacfcebccbf4135ba5d817ec32" kindref="member">orientation</ref>;</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;size_t&gt;&amp;<sp/><ref refid="class_ship_1a8744ee18d99b1d3b561150b243373bc4" kindref="member">Ship::getPath</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_ship_1ae417f0fe1c677e41a819294e7f82d711" kindref="member">path</ref>;</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="class_ship_1ab649f0a656d76a6293b55651a96c08e0" kindref="member">Ship::getPathIndex</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_ship_1a6146628b2aa51985d6c705014b380226" kindref="member">path_index</ref>;</highlight></codeline>
<codeline lineno="99"><highlight class="normal">}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal">std::vector&lt;Ship&gt;<sp/><ref refid="_ships_8cpp_1a6afa51a7326b3ca9dcbe6dc7936a6cab" kindref="member">createShips</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_ships,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::pair&lt;float,<sp/>float&gt;&gt;&amp;<sp/>coords,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="_graph_8hpp_1a4158a12566a53ab55345e02a783fe275" kindref="member">Graph</ref>&amp;<sp/>graph,<sp/><ref refid="class_graph_manager" kindref="compound">GraphManager</ref>&amp;<sp/>graphManager,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>speed)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Ship&gt;<sp/>ships;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>std::srand(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::time(0)));</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::pair&lt;float,<sp/>float&gt;&gt;<sp/>valid_coords<sp/>=<sp/>graphManager.<ref refid="class_graph_manager_1ae8059a7d140ad6d3f34db88a9c54ed82" kindref="member">get_valid_coords</ref>();</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_ships;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>std::rand()<sp/>%<sp/>valid_coords.size();</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(index<sp/>&lt;<sp/>valid_coords.size());</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ships.emplace_back(valid_coords[index],<sp/>graph,<sp/>graphManager,<sp/>speed);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ships;</highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="cpp/src/objects/Ships.cpp"/>
  </compounddef>
</doxygen>
