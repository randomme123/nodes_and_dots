<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.11.0" xml:lang="en-US">
  <compounddef id="_distance_8cpp" kind="file" language="C++">
    <compoundname>Distance.cpp</compoundname>
    <includes refid="_distance_8hpp" local="yes">Distance.hpp</includes>
    <incdepgraph>
      <node id="1">
        <label>cpp/src/utils/Distance.cpp</label>
        <link refid="_distance_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>Distance.hpp</label>
        <link refid="_distance_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>cmath</label>
      </node>
      <node id="3">
        <label>utility</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="_distance_8cpp_1a9a727e9ea07b2ef614ec101a89b696ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float euclidean_distance</definition>
        <argsstring>(const std::pair&lt; float, float &gt; &amp;a, const std::pair&lt; float, float &gt; &amp;b)</argsstring>
        <name>euclidean_distance</name>
        <param>
          <type>const std::pair&lt; float, float &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const std::pair&lt; float, float &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cpp/src/utils/Distance.cpp" line="5" column="7" bodyfile="cpp/src/utils/Distance.cpp" bodystart="5" bodyend="7"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Distance.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_distance_8hpp" kindref="compound">Distance.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="_distance_8cpp_1a9a727e9ea07b2ef614ec101a89b696ba" kindref="member">euclidean_distance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;float,<sp/>float&gt;&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;float,<sp/>float&gt;&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::sqrt(std::pow(a.first<sp/>-<sp/>b.first,<sp/>2)<sp/>+<sp/>std::pow(a.second<sp/>-<sp/>b.second,<sp/>2)));</highlight></codeline>
<codeline lineno="7"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="cpp/src/utils/Distance.cpp"/>
  </compounddef>
</doxygen>
